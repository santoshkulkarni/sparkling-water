import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path
import java.util.zip.GZIPOutputStream
import static java.nio.file.StandardCopyOption.*;


defaultTasks 'build_python'
description = "Sparkling-Water Python Package"


def getOS() {
    String os = [Os.FAMILY_WINDOWS, Os.FAMILY_MAC, Os.FAMILY_UNIX].find { String family -> Os.isFamily(family) }
    return os
}

def getOsSpecificCommandLine(args) { return Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] + args : args }

ext {
    PROJECT_VERSION = version
    T = getProjectDir().toString()
}

task setProjectVersion << {
    File INIT = new File([T, "sparkling_water", "__init__.py"].join(File.separator))
    print INIT.path
    def txt = ""
    txt = INIT.text
    txt = txt.replaceAll("SUBST_PROJECT_VERSION", PROJECT_VERSION)
    INIT.write(txt)
}


task resetProjectVersion << {
    File INIT = new File([T, "sparkling_water", "__init__.py"].join(File.separator))
    print INIT.path
    def txt = ""
    txt = INIT.text
    txt = txt.replaceAll(PROJECT_VERSION, "SUBST_PROJECT_VERSION")
    INIT.write(txt)
}


task upgradeOrInstallDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine(["pip", "install", "tabulate", "--user", "--upgrade"])
    commandLine getOsSpecificCommandLine(["pip", "install", "wheel", "--user", "--upgrade"])
    commandLine getOsSpecificCommandLine(["pip", "install", "h2o", "--user", "--upgrade"])
}

task copyJar(type: Copy) {
            from '../assembly/build/libs'
            into "data_files"
            include "sparkling-water-assembly-"+PROJECT_VERSION+"-all.jar"
            rename "sparkling-water-assembly-"+PROJECT_VERSION+"-all.jar", "sparkling-water-all.jar"

}
task buildDist(type: Exec) {
    def SPARK_HOME = System.getenv("SPARK_HOME")
    if (SPARK_HOME != null) {
        environment['PYTHONPATH'] = SPARK_HOME + File.separator + "python" + File.pathSeparator +
                                    SPARK_HOME + File.separator + "python" + File.separator + "lib" + File.separator + "py4j-0.8.2.1-src.zip";
    }
    commandLine getOsSpecificCommandLine(["python", "setup.py", "bdist_wheel"])
}

def testsPath = new File("./tests")

/*task smokeTest(type: Exec) {
    dependsOn build
    println "PyUnit smoke test (run.py --wipeall --testsize s)..."
    workingDir testsPath
    commandLine 'pwd'
    commandLine 'python', '../../scripts/run.py', '--wipeall', '--testsize', 's'
}*/

task cleanUpSmokeTest << {
    new File([T, "tests/results"].join(File.separator)).deleteDir()
}

task cleaner << {
    println "Cleaning..."
    getProjectDir().toString()
    new File([getProjectDir().toString(), "dist"].join(File.separator)).deleteDir()
    new File([getProjectDir().toString(), "sparkling_water.egg-info"].join(File.separator)).deleteDir()
    new File([getProjectDir().toString(), " build/"].join(File.separator)).deleteDir()
    new File([getProjectDir().toString(), "data_files"].join(File.separator)).deleteDir()
}

clean.dependsOn cleaner, cleanUpSmokeTest
upgradeOrInstallDependencies.dependsOn cleaner
setProjectVersion.dependsOn upgradeOrInstallDependencies
copyJar.dependsOn setProjectVersion
buildDist.dependsOn copyJar
resetProjectVersion.dependsOn buildDist
task build_python(dependsOn: resetProjectVersion)
build.dependsOn build_python

